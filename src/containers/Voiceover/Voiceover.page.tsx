import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { Box, Tab, styled } from '@mui/material';
import TabContext from '@mui/lab/TabContext';
import TabList from '@mui/lab/TabList';
import TabPanel from '@mui/lab/TabPanel';

import { DEFAULT_VOICE_OVER_TEXT, ROUTES } from '~/config';
import { VoiceoverProjectsApi } from '~/api';
import { Page } from '~/components/ui';
import { AddVoiceModal } from '~/components/domain';
import { formattedDate } from '~/utils/helpers';
import { useVariants, useVoiceover } from '~/context';

import { VoiceCard, VoiceoverCard } from './components';

export const VoiceoverPage = () => {
  const router = useRouter();
  const { voices } = useVariants({});
  const [showVoiceModal, setShowVoiceModal] = useState<boolean>(false);
  const [currentVoice, setCurrentVoice] = useState('project');
  const { voiceoverProjects, refetchVoiceoverProjects } = useVoiceover();

  useEffect(() => {
    refetchVoiceoverProjects();
  }, []);

  const handleAddVoiceover = async (voice?: string) => {
    try {
      window.analytics.track(`Add New Voiceover`, {});

      const textToSpeech = {
        language: 'en',
        text: DEFAULT_VOICE_OVER_TEXT,
      };

      const response =
        await VoiceoverProjectsApi.createVoiceoverWithTextToSpeech({
          name: 'Untitled',
          isDeleted: false,
          generateOnSave: false,
          textToSpeech: voice ? { ...textToSpeech, voice } : textToSpeech,
        });

      router.push(`${ROUTES.VOICEOVER}/${response._id}`);
    } catch (e) {
      console.log('---CreateVoiceoverProject error---', e);
    }
  };

  const handleAddVoice = () => {
    window.analytics.track(`Add New Voice`, {});
    setShowVoiceModal(true);
  };

  const handleCloseVoiceModal = () => {
    setShowVoiceModal(false);
  };

  // @ts-ignore
  const handleVoiceChange = (event: React.SyntheticEvent, newValue: string) => {
    setCurrentVoice(newValue);
  };

  const handleNavigate = (id: string, variant: string) => {
    // TODO: check this logic later
    if (variant === 'primary') {
      router.push(`${ROUTES.VOICEOVER}/${id}`);
    }
  };

  return (
    <Page isPrivate>
      <Box display='flex' gap={6} mt='89px' mb={4}>
        <VoiceCard
          title='Add a project'
          desc='Create a voice over project using pre-trained AI voices'
          onClick={() => handleAddVoiceover()}
        />
        <VoiceCard
          title='Add a voice'
          desc='Generate pre-trained voice(s) for voice over'
          onClick={handleAddVoice}
        />
      </Box>
      <Box sx={{ width: '100%', mt: 2 }}>
        <TabContext value={currentVoice}>
          <Box>
            <TabList
              onChange={handleVoiceChange}
              TabIndicatorProps={{ style: { display: 'none' } }}
            >
              <TabTitle
                label='Projects'
                value='project'
                active={currentVoice === 'project' ? 'true' : 'false'}
              />
              <TabTitle
                label='Voice library'
                value='voice'
                active={currentVoice === 'voice' ? 'true' : 'false'}
              />
            </TabList>
          </Box>
          <TabPanel value='project' sx={{ p: 0 }}>
            <Box display='flex' flexWrap='wrap' gap='40px'>
              {voiceoverProjects?.data.map((voiceOver: any) => (
                <VoiceoverCard
                  key={voiceOver?.id}
                  id={voiceOver?.id}
                  textToSpeech={voiceOver?.textToSpeech?.id}
                  title={voiceOver?.name}
                  desc={`Last viewed: ${formattedDate(
                    voiceOver?.updatedAt,
                    'year'
                  )}`}
                  status={voiceOver?.textToSpeech?.status || 'Generating'}
                  onClick={handleNavigate}
                  refetchVoiceoverProjects={refetchVoiceoverProjects}
                />
              ))}
            </Box>
          </TabPanel>
          <TabPanel value='voice' sx={{ p: 0 }}>
            <Box display='flex' flexWrap='wrap' gap='40px'>
              {voices.map(voice => (
                <VoiceoverCard
                  key={voice.id}
                  id={voice.id}
                  variant='secondary'
                  title={voice.name}
                  textToSpeech={voice?.textToSpeech?.id}
                  desc='This voice is pre-generated by Speechlab.'
                  status='Ready to use'
                  showSetting={voice?.voiceType !== 'global'}
                  onClick={handleNavigate}
                  onCreateProject={handleAddVoiceover}
                  refetchVoiceoverProjects={refetchVoiceoverProjects}
                />
              ))}
            </Box>
          </TabPanel>
        </TabContext>
      </Box>

      {showVoiceModal && (
        <AddVoiceModal open={showVoiceModal} onClose={handleCloseVoiceModal} />
      )}
    </Page>
  );
}

const TabTitle = styled(Tab)<{ active?: string }>(({ active = 'false' }) => ({
  fontSize: '12px',
  fontWeight: 500,
  borderRadius: '4px',
  background: active === 'true' ? '#1B1B1F14 !important' : '#fff !important',
  textTransform: 'capitalize',
  color: '#1B1B1F !important',
  padding: '4px 8px',
  height: '22px',
  minHeight: '22px',
  minWidth: 'auto',
}));

VoiceoverPage.displayName = 'Voiceover Page';
